/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.6
 * Generated at: 2018-08-30 06:03:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.sparta.common.application.SessionMgr;
import com.sparta.common.constants.SessionParams;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.sparta.common.application.SessionMgr");
    _jspx_imports_classes.add("com.sparta.common.constants.SessionParams");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<script type=\"text/javascript\" src=\"../js/window.js\"></script>\r\n");
      out.write("\t\t<script type=\"text/javascript\" src=\"../js/util.js\"></script>\r\n");
      out.write("\t\t<script type=\"text/javascript\">\t\t\t\r\n");
      out.write("\t\t\t");

				boolean bMaximizeScreen = (Boolean)SessionMgr.getAttribute(SessionParams.MAXIMIZE_SCREEN);			
				if (bMaximizeScreen) {
			
      out.write("\r\n");
      out.write("\t\t\t\tmaximizeWindow(window);\r\n");
      out.write("\t\t\t\twindow.focus();\r\n");
      out.write("\t\t\t");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t//Function used to ensure the main frame is loaded after the navigation frame\r\n");
      out.write("\t\t\tfunction refreshFrame() {\r\n");
      out.write("\t\t\t\twindow.frames['mainFrame'].window.location.href = \"navigationMain.jsf\";\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction initMainFrame(){\r\n");
      out.write("\t\t\t\t//set the key handlers for all the initial frames in the page\r\n");
      out.write("\t\t\t\t//the TWBodyRenderer will handle all of the frames loaded into the main frame\r\n");
      out.write("\t\t\t\tif (typeof window.event != 'undefined'){\r\n");
      out.write("\t\t\t\t\tdocument.onkeydown = handleKeys;\r\n");
      out.write("\t\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\telse{\r\n");
      out.write("\t\t\t\t\tdocument.onkeypress = handleKeysPassEvent;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t</script>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t\r\n");
      out.write("\t<frameset name=\"entireFrameSet\" rows=\"0, 34,*,26\" cols=\"*\" frameborder=\"no\" framespacing=\"0\">\r\n");
      out.write("\t  <frame src=\"hiddenMainFrame.jsf\" id=\"hidFrame\" name=\"hidFrame\" scrolling=\"no\" noresize>\r\n");
      out.write("\t  <frame src=\"header.jsf\" id=\"headerFrame\" name=\"headerFrame\" scrolling=\"no\" noresize=\"noresize\">\r\n");
      out.write("\t  <frameset name=\"contentFrameSet\" rows=\"*\" cols=\"200,*\" onload=\"initMainFrame();refreshFrame()\">\r\n");
      out.write("\t    <frame src=\"navigationTree.jsf\" style=\"border-right: 1px solid #A4B1C4; cursor: col-resize\" id=\"navigationTreeFrame\" name=\"navigationTreeFrame\" scrolling=\"auto\">\r\n");
      out.write("\t    <frame src=\"blank.html\" id=\"mainFrame\" name=\"mainFrame\" scrolling=\"auto\">\r\n");
      out.write("\t  </frameset>\r\n");
      out.write("\t  <frame src=\"footer.jsf\" name=\"footerFrame\" scrolling=\"no\" noresize>\r\n");
      out.write("\t</frameset>\r\n");
      out.write("\r\n");
      out.write("\t<noframes />\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
